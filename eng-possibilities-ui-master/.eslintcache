[{"C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\index.js":"1","C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\reportWebVitals.js":"2","C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\App.js":"3","C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\components\\NavBar\\index.js":"4","C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\pages\\Forecaster\\index.js":"5"},{"size":549,"mtime":1614297570315,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1614297570400,"results":"8","hashOfConfig":"7"},{"size":389,"mtime":1614650982256,"results":"9","hashOfConfig":"7"},{"size":344,"mtime":1614297570681,"results":"10","hashOfConfig":"7"},{"size":7074,"mtime":1614740210389,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1qefxt5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\index.js",[],["24","25"],"C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\reportWebVitals.js",[],"C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\App.js",[],"C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\components\\NavBar\\index.js",[],"C:\\Users\\DChen\\DePo-Engineering_Possibilities\\eng-possibilities-ui-master\\src\\pages\\Forecaster\\index.js",["26","27","28","29","30"],"import React, { useState, useRef, setState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport {XYPlot, \n  LineSeries, \n  XAxis, \n  YAxis, \n  VerticalGridLines, \n  HorizontalGridLines,\n  MarkSeries,\n  Voronoi,\n  Hint} from 'react-vis';\n\n// import ReactDataGrid from 'react-data-grid';\nimport data from '../../eng-possibilities-svcs-tests/src/main/resources/data/investment-details.json';\n\nconst ForecasterHome = () => {\n    const SectionStyled = styled.section`\n      max-width: 3000px;\n      position: relative;\n\n\n      .inner {\n        display: grid;\n        grid-template-columns: 3fr 2fr;\n        grid-gap: 250px;\n\n      }\n\n      ul {\n        &.fancy-list {\n          padding: 0;\n          margin: 0;\n          list-style: none;\n          li {\n            position: relative;\n            padding-left: 30px;\n            margin-bottom: 10px;\n            &:before {\n              content: 'â–¹';\n              position: absolute;\n              left: 0;\n              color: #DA4E4E;\n            }\n          }\n        }\n      }\n  `;\n  \n\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n    head: {\n      backgroundColor: '#7399C6',\n      // color: '#FFFFFF',\n      align: \"center\"\n    },\n    cell: {\n      backgroundColor: '#D4E4FA',\n    },\n  });\n  \n  const classes = useStyles();\n  const revealContainer = useRef(null);\n  const investments = Array(8);\n\n  data.Investments.map((data,i) => {\n    investments[i] = table(data.data);\n  })\n\n  const lines = investments.map((p, i) => p.map(d => ({...d, line: i})));\n\n\n  const [hoveredNode, setHoveredNode] = useState(null);\n\n  // useEffect(() => {\n  //   if (hoveredNode !== null) {\n  //   setPasswdMismatch(true);\n  \n  //      } \n  //   else{\n  //     setPasswdMismatch(false);\n  //  }\n  // }, [rePassword]);\n\n \n  return (\n    <SectionStyled id=\"about\" ref={revealContainer}>\n    \n       <div>\n            <h3>Investment Forecaster</h3>\n            <p>This page allows you to customize your investments and view the potential growth of <b>$10,000</b> over a period of <b>10 years</b>.</p>\n        </div>\n\n\n      {/* {investments = investments.map((p, i) => p.map(d => ({...d, line: i})))}; */}\n      {console.log(investments)}\n      <XYPlot \n        xType=\"ordinal\"\n        // stackBy=\"y\"\n        width={1000}\n        height={500}\n        style={{paddingLeft: '30'}}\n        >\n        <XAxis title=\"Year\"/>\n        <YAxis title=\"Investment Outlook\"\n        tickLabelAngle={-70}\n        />\n        {/* <AreaSeries data={table(data.data)} \n        style={{strokeWidth: 2, fill: 'none'}}\n        /> */}\n        {lines.map((d, i) => {\n          return (\n            <LineSeries\n              key={i}\n              opacity={hoveredNode && hoveredNode.line === i ? 1 : 0.5}\n              data={d}\n              onValueMouseOver={(event)=>{\n                // does something on click\n                // <Hint value={data.Investments[i].category} style={{fontSize: 14}}/>\n                <Hint value={d}>\n                  <div style={{background: 'black'}}>\n                    <p>{d.y}</p>\n                  </div>\n                </Hint>\n                // you can access the value of the event\n            }}\n            />\n          )          \n        })}\n        {hoveredNode && <MarkSeries data={[hoveredNode]} />}\n        {/* <Hint value={data.Investments[0].category} style={{fontSize: 14}}/> */}\n        <Voronoi\n            nodes={lines.reduce((acc, d) => [...acc, ...d], [])}\n            onHover={node => setHoveredNode(node)}\n            // onBlur={() => (hoveredNode === null)}\n            // onBlur={() => this.setState({hoveredNode: null})}\n          />\n        {/* {()=>(hoveredNode ? (\n          <Hint value={d}>\n            <div style={{background: 'black'}}>\n              <p>{d.y}</p>\n            </div>\n          </Hint>\n          ):\n        } */}\n      </XYPlot>\n      {/* {data.Investments.map((data,i) => {\n            // investments[i] = table(data.data);\n            return (\n\n              <ul key = {i}>\n                <div>\n                  <label>{data.category}</label>\n                  <br></br>\n                  <input type=\"text\" id={data.category} min={data.minimum}></input>\n                </div>\n\n              </ul>\n            )\n          }    \n        )\n      } */}\n\n    <br />\n    <br />\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead className={classes.head}>\n          <TableRow>\n            <TableCell>Investment Category</TableCell>\n            {data.Investments.map((data,i) => (\n                  <TableCell align=\"right\">{2021+i}</TableCell>\n                )  \n              )\n            }\n            <TableCell align=\"center\">{2029}</TableCell>\n            <TableCell align=\"center\">{2030}</TableCell>\n            <TableCell align=\"center\">Input</TableCell>\n            <TableCell align=\"center\"></TableCell>\n            <TableCell align=\"center\">{2031}</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.cell}>\n          {data.Investments.map((row,y) => (\n            <TableRow key={row.category}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.category}\n              </TableCell>\n              {row.data.map((daat) => (\n                <TableCell align=\"center\">{\"$\" + (daat*1000)}</TableCell>\n              ))}\n              <TableCell align=\"center\">\n                <input type=\"text\" id={row.category} min={row.minimum} style={{width:'60px', marginRight: '4px'}}></input>\n                <Button align=\"center\" variant=\"contained\" color=\"primary\" disableElevation>\n                  Submit\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    <br />\n    <br />       \n    </SectionStyled>\n  );\n};\n\nexport default ForecasterHome;\n\nfunction table(profile) {\n  var i = 0, invest = [];\n  for (i = 0; i < 10; i++) {\n      invest[i] = {x: (2021+i), y: profile[i]*1000};\n  }\n  \n  return invest;  \n}\n\n// function all(profile) {\n//   // var i = 0, invest =[];\n//   var invest = [];\n//   profile.jsonParse()\n//   profile.map((datap, i) => \n//     invest[i] = {datap.data};\n//   )\n//   // for (i = 0; i < 8; i++) {\n//   //   // let temp = new Array(11);\n//   //   // for (y = 0; y < 11; y++) {\n//   //   //   temp[y] = {x: (2021+y), y: profile[i].data[y]*1000};\n//   //   // }\n//   //   invest[i] = table();\n//   // }\n//   return invest;\n// }\n\n\nfunction handleClick(e) {\n  e.preventDefault();\n  console.log('The link was clicked.');\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":35,"nodeType":"37","messageId":"38","endLine":1,"endColumn":43},{"ruleId":"35","severity":1,"message":"39","line":16,"column":3,"nodeType":"37","messageId":"38","endLine":16,"endColumn":20},{"ruleId":"35","severity":1,"message":"40","line":17,"column":3,"nodeType":"37","messageId":"38","endLine":17,"endColumn":22},{"ruleId":"41","severity":1,"message":"42","line":77,"column":33,"nodeType":"43","messageId":"44","endLine":77,"endColumn":35},{"ruleId":"35","severity":1,"message":"45","line":249,"column":10,"nodeType":"37","messageId":"38","endLine":249,"endColumn":21},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'setState' is defined but never used.","Identifier","unusedVar","'VerticalGridLines' is defined but never used.","'HorizontalGridLines' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleClick' is defined but never used.","no-global-assign","no-unsafe-negation"]